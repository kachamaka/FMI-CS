public class CalculatePi extends Thread {

	static long numPoints;
	static int numThread;
	static long[] numPointsInCircle;
	static long sideSquare;
	static long pointsOfThread;
	static String threadName;
	static boolean quit = false;

	public static long randomNumber(long min, long max) {
		return Math.round((Math.random() * (max - min)) + min);
	}

	public static void main(String[] args) {
		for (int i = 0; i < args.length; i++) {
			if (args[i].equals("-s")) {
				sideSquare = new Long(args[i + 1]);
			}
			if (args[i].equals("-t")) {
				numThread = new Integer(args[i + 1]);
			}
			if (args[i] == "-q") {
				quit = true;
			}
		}
		if (sideSquare <= 0 || numThread <= 0 || args.length < 4
				|| args.length > 5) {
			System.out.println("ERROR: Args are not correct!!!");
		} else {
			numPointsInCircle = new long[numThread];
			/*for (int i = 0; i < numThread; i++) {
				numPointsInCircle[i] = 0;

			}*/
			numPoints = randomNumber(0, sideSquare * sideSquare);
			pointsOfThread = numPoints / numThread;
			for (int t = 0; t < numThread; t++) {
				if (t == numThread - 1) {
					pointsOfThread = numPoints - pointsOfThread
							* (numPoints - 1);
				}
				MyThread thread = new MyThread("Thread " + t, sideSquare,
						numPoints, numThread, pointsOfThread);
				thread.start();
				numPointsInCircle[t] = thread.numPointsInCircle;
				System.out.println("num "+numPointsInCircle[t]);
			}
		}
		long piontsInCircle = 0;
		for (int i = 0; i < numThread; i++) {
			piontsInCircle += numPointsInCircle[i];
		}
		double pi = 4 * ((double) piontsInCircle / numPoints);
		System.out.println(pi);

	}
}
